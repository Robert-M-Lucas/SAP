# import sys
# from datetime import datetime
#
# OUTPUT_PATH = "src/code.h"
# RAM_SIZE = 2**4
#
# OP_CODES = {
#     "LDA": "0000",
#     "ADD": "0001",
#     "SUB": "0010",
#     "OUT": "1110",
#     "HLT": "1111",
#     "XX": "1010",
# }
#
# NO_DATA = ["OUT", "HLT", "XX"]
#
# if len(sys.argv) >= 2:
#     path = sys.argv[1]
# else:
#     path = "code.SAP"
#
# with open(path, "r") as f:
#     code = f.read()
#
# output = f"""// Autogenerated at {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}
# #ifndef ARDUINO_FLASHER_ASSEMBLED_CODE_H
# #define ARDUINO_FLASHER_ASSEMBLED_CODE_H
#
# #include <Arduino.h>
#
# byte data[] = {{
# """
#
# lines = code.split("\n")
# if len(lines) > RAM_SIZE:
#     print(f"Too many lines ({len(lines)}) for RAM size ({RAM_SIZE})")
#     exit(1)
#
# while len(lines) < RAM_SIZE:
#     lines.append("XX")
#
# for line in lines:
#     split = line.split(" ")
#     instruction = split[0].upper()
#     data = split[1] if len(split) > 1 else None
#
#     output += "    b" + OP_CODES[instruction] + ", "
#
#     if instruction in NO_DATA:
#         output += "0b0000,\n"
#     else:
#         if data is None:
#             print(f"Instruction '{instruction}', }")
#
#
# output += """};
#
# #endif //ARDUINO_FLASHER_ASSEMBLED_CODE_H
# """